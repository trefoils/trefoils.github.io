(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{372:function(_,v,t){"use strict";t.r(v);var C=t(42),P=Object(C.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"tcp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[_._v("#")]),_._v(" TCP")]),_._v(" "),t("p",[_._v("TCP（Transmission Control Protocol，传输控制协议）是面向连接的传输协议，通过序列确认和包重发机制提供可靠的数据流发送和应用程序的虚拟连接服务。TCP和IP相结合，构成了Internet协议的核心。")]),_._v(" "),t("p",[_._v("TCP提供应用程序和IP之间的中间层通信服务。当应用程序需要使用IP在网络上发送大量数据时，不需要将数据拆分成一组数据块，然后提交一系列的IP请求，而只要提交一个请求到TCP，由TCP来处理IP的细节。")]),_._v(" "),t("p",[_._v("IP数据包是一个字节序列，由包头和后面的包体组成。包头中描述包的目的地址和用来转发到最终目的地址的路由，后者为可选项；包体中包含IP层要传输的数据。由于网络冲突、流量负载均衡和其他不可预见的网络行为，IP包在传输过程中有可能被丢失或打乱顺序。TCP可以检测到这些问题，并要求重新传输丢失的数据包、重新组织被打乱顺序的数据包，甚至可以帮助最小化网络冲突，从而减小发生其他问题的概率。一旦TCP层的接收者最终收到了组织好的最初传输数据的复本，它将发送一个报文给应用程序。这样，使用TCP的应用程序就不需要考虑底层网络通信的细节了。")]),_._v(" "),t("p",[_._v("TCP是一个精确传输协议，但并不是及时传输协议。使用TCP传输数据可能会导致相对较长的延时，通常用来等待打乱顺序的消息或者重新传输丢失的消息。因此，TCP并不适用于一些对实时性要求很高的应用程序，如VOIP（Voice over IP，在IP层实现语音通信的协议）。")]),_._v(" "),t("p",[_._v("TCP是可靠的流传输服务，它可以保证从一个主机传送到另一个主机的数据流不会出现重复数据或丢失数据的情况。因为在IP中数据包的传输是不可靠的，所以在传输时需要使用一种叫作主动确认技术来确保数据包传输的可靠性。主动确认技术要求接收者在接收到数据后发一个确认消息，发送者会为发送的每个数据包保留一条记录，并且等待收到确认消息后再发送下一个数据包。发送者还会保留一个从发送数据包开始的计时器，如果计时器过期就重新传输数据包，这种情况下通常数据包已经丢失或者被破坏。")]),_._v(" "),t("p",[_._v("TCP协议具有以下5个特点。")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("TCP是面向连接的协议。即应用程序要使用TCP协议，需要先建立连接，传送数据完成后，需要释放连接。")])]),_._v(" "),t("li",[t("p",[_._v("TCP是点对点协议。即每条TCP连接只能有两个端点，因此每条TCP连接只能是点对点的（只能是一对一）。")])]),_._v(" "),t("li",[t("p",[_._v("TCP提供可靠传输服务。即TCP连接可以实现数据的无差错、不丢失、不重复及按序到达的传输。")])]),_._v(" "),t("li",[t("p",[_._v("TCP提供全双工通信。TCP连接的两端都有接收缓冲区和发送缓冲区，因此可以实现全双工通信。")])]),_._v(" "),t("li",[t("p",[_._v("TCP是面向字节流的协议。与UDP不同，TCP将应用程序交下来的数据仅仅看作一连串的无结构的字节流，TCP并不关心字节流的含义，只保证接收方收到的字节流与发送方发出的字节流一致。")])])]),_._v(" "),t("h2",{attrs:{id:"tcp的分段格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp的分段格式"}},[_._v("#")]),_._v(" TCP的分段格式")]),_._v(" "),t("p",[_._v("为了更高效地在网络中传输，消息被拆分成一个个消息单元，在网络上的计算机之间传递。消息单元被称为段（Segment）。例如，在浏览网页时，HTML文件从Web服务器发送到客户端。Web服务器端的TCP层将文件的字节序拆分成段，然后将它们独立地传递到Web服务器端的IP层。IP层将TCP段封装成IP数据包，并为每个数据包都添加一个包头，其中包含要到达的目标地址。尽管每个数据包都拥有相同的目标地址，但它们可以经过不同的网络路径到达目标地址。当目标计算机上的客户端程序接收到这些数据包后，TCP层将对各个段进行重组，以确保这些数据包的顺序和内容都是正确的，然后将它们以流的方式传递给应用程序。")]),_._v(" "),t("p",[_._v("为了实现面向连接的可靠传输，TCP的分段格式比UDP要复杂")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/network/tcp_head.jpeg",alt:"image"}})]),_._v(" "),t("ul",[t("li",[t("p",[_._v("源端口（16位）：标识发送消息的端口。")])]),_._v(" "),t("li",[t("p",[_._v("目标端口（16位）：标识接收消息的端口。")])]),_._v(" "),t("li",[t("p",[_._v("发送序列号（32位）：本段中第1个数据字节的顺序号。")])]),_._v(" "),t("li",[t("p",[_._v("接收时的确认序列号（32位）：指明接收方期望接收的下一个数据字节的顺序号。")])]),_._v(" "),t("li",[t("p",[_._v("偏移值（4位）：指定TCP段头中32位字的数量。")])]),_._v(" "),t("li",[t("p",[_._v("保留（4位）：为将来使用预留的位，目前使用时将这些位设置为0。")])]),_._v(" "),t("li",[t("p",[_._v("CWR：由发送消息的主机设置，以表明它收到带ECE标记的TCP数据包。")])]),_._v(" "),t("li",[t("p",[_._v("ECE：表明了TCP的对等体在3次握手过程中是否具有拥塞通知能力。当ECE位的值等于1时，表示目的端发生了阻塞。因此在传回发送端的确认包中会将此位设置为1，以通知发送端降低其数据的发送量。")])]),_._v(" "),t("li",[t("p",[_._v("URG：表示发送的数据要立即被处理，无须等待接收设备缓存中的数据完成。")])]),_._v(" "),t("li",[t("p",[_._v("ACK：确认从主机收到TCP数据。")])]),_._v(" "),t("li",[t("p",[_._v("PSH：表示数据包中的数据必须迅速传播到上层协议进行处理。")])]),_._v(" "),t("li",[t("p",[_._v("RST：由于不可能恢复的错误，造成TCP连接重置。当接收到的TCP段中RST位为1时，接收方必须终止连接，这将导致双方立刻重新设置连接，可能导致在传送中丢失数据。RST不是正常关闭TCP连接的方式，它只表明一个异常条件。通常使用FIN标志关闭TCP连接。重新设置TCP连接的原因可能是主机崩溃等。")])]),_._v(" "),t("li",[t("p",[_._v("SYN：打开主机之间虚拟电路的连接。")])]),_._v(" "),t("li",[t("p",[_._v("FIN：结束TCP连接，不再需要数据传输。")])]),_._v(" "),t("li",[t("p",[_._v("窗口大小（16位）：指定发送设备希望接收的字节数。")])]),_._v(" "),t("li",[t("p",[_._v("校验和（16位）：根据报头和数据字段计算出的校验和。")])]),_._v(" "),t("li",[t("p",[_._v("紧急指针（16位）：从发送序列号开始的偏置值，指向字节流中的一个位置，此位置之前的数据是紧急数据。")])]),_._v(" "),t("li",[t("p",[_._v("可选项（长度可变）：目前只有一个可选项，即建立连接时指定的最大段长。")])])]),_._v(" "),t("h2",{attrs:{id:"tcp连接的建立和释放"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp连接的建立和释放"}},[_._v("#")]),_._v(" TCP连接的建立和释放")]),_._v(" "),t("p",[_._v("TCP是一个面向连接的可靠的传输控制协议，在每次数据传输之前需要首先建立连接，当连接建立成功后才开始传输数据，数据传输完成后要释放连接，这个过程与打电话类似。由于TCP使用的网络层IP协议是一个不可靠的、无连接的协议，为了确保连接的建立和释放都是可靠的，TCP使用三次握手的方式来建立连接。")]),_._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[_._v("Tips")]),_._v(" "),t("p",[_._v("TCP连接由操作系统通过Socket开发接口来管理，将会在socket开发开发接口中讨论")])]),_._v(" "),t("h3",{attrs:{id:"建立连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建立连接"}},[_._v("#")]),_._v(" 建立连接")]),_._v(" "),t("p",[_._v("TCP通过3次握手的方式来建立连接，如图所示")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/network/tcp_connect.jpeg",alt:"image"}})]),_._v(" "),t("p",[_._v("建立连接的过程说明如下。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("客户端发送一个SYN报文段（SYN为1）指明希望连接的服务器端口和初始顺序号（ISN）。")])]),_._v(" "),t("li",[t("p",[_._v("服务器发回包含服务器的初始顺序号的SYN报文段（SYN为1）作为应答。同时，将确认号设置为客户端的ISN加1以对客户端的SYN报文段进行确认（ACK字段也为1，表示该报文是对SYN = 1的报文的应答）。")])]),_._v(" "),t("li",[t("p",[_._v("客户端必须将确认号设置为服务器的ISN加1以对服务器的SYN报文段进行确认，该报文通知目的主机双方已完成连接建立。")])])]),_._v(" "),t("h3",{attrs:{id:"数据传输"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据传输"}},[_._v("#")]),_._v(" 数据传输")]),_._v(" "),t("p",[_._v("TCP是一种可靠的传输协议，它使用序列号来标识数据中的每个字节。序列号中包含每个主机中发送的字节的顺序，从而使目的主机可以按照顺序对数据进行重组。每个字节的序列号是递增的。在建立连接时3次握手的前两次中，两端的主机会交换初始序列号（ISN）。初始序列号是随机的，不可预知的。")]),_._v(" "),t("p",[_._v("TCP主要采用累计确认的机制。接收者收到数据后，会发送一个确认包，指定需要接收的下一个字节的序列号。例如，主机A向主机B发送4字节的数据，它们的序列号分别为100、101、102和103，主机B在接收到这4字节后，会向主机A发送一个包含序列号104的确认包，表明它希望接收的下一个字节的序列号为104。")]),_._v(" "),t("p",[_._v("除了累计确认外，接收者还可以发送选择确认包。通常在数据丢失或损坏时，接收者发送选择确认包来指定发送者重新发送指定的数据包。")]),_._v(" "),t("p",[_._v("TCP使用序列号和确认机制可以丢弃重复数据、重新发送丢失的数据、按正确的顺序来整理数据，从而确保收到数据的正确性。TCP使用检验和（Checksum）来验证数据的正确性。")]),_._v(" "),t("p",[_._v("TCP还提供流量控制的功能。如果发送方主机的网卡带宽大于接收方主机的网卡带宽，则要对发送数据的流量进行控制，否则接收方将无法稳定地接收和处理数据。TCP使用滑动窗口来控制流量。在每个TCP段中，接收者都要在“接收窗口大小”字段中指定当前连接希望接收的数据大小，单位是字节。发送方主机最多只能发送“接收窗口大小”字段中指定数量的数据，等收到确认信息后再发送下一组数据。")]),_._v(" "),t("h3",{attrs:{id:"释放链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#释放链接"}},[_._v("#")]),_._v(" 释放链接")]),_._v(" "),t("p",[_._v("在多数情况下，TCP使用4次握手来断开连接。当一方希望断开连接时，它会向对方发送一个FIN包；对方在收到FIN包后，会发送一个ACK确认包。因此，通常来说双向连接需要从每个TCP端点发送一对FIN和ACK段。")]),_._v(" "),t("p",[_._v("TCP也可以使用3次握手的方式断开连接。当主机A发送FIN包后，主机B回复FIN加ACK包，将上面的两个步骤合并为一个步骤，然后主机A再回复ACK包。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/network/tcp_close.jpeg",alt:"image"}})]),_._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[_._v("第一次挥手：A发送一个FIN，用来关闭A到B的数据传送，A进入FIN_WAIT_1（主动关闭）状态。")]),_._v(" "),t("li",[_._v("第二次挥手：B收到FIN后，发送一个ACK给A，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），B进入CLOSE_WAIT（被动关闭，关闭等待）状态。")]),_._v(" "),t("li",[_._v("第三次挥手：B发送一个FIN，用来关闭B到A的数据传送，B进入LAST_ACK（最后确认）状态。")]),_._v(" "),t("li",[_._v("第四次挥手：A收到FIN后，A进入TIME_WAIT状态（注意此时TCP连接还没有释放，必须经过2MSL（最大报文段寿命）的时间），接着发送一个ACK给B，确认序号为收到序号+1，B进入CLOSED状态，完成四次挥手。")])]),_._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[_._v("关于为什么要等待2MSL：")]),_._v(" "),t("p",[_._v("MSL（Maximum Segment Lifetime），这是TCP 对TCP Segment 生存时间的限制。\n客户端发送最后一个ACK后，不能确保服务端一定能收到，假如ACK没有被服务端收到，超时后服务端重新进行第三次挥手，这时候如果A还在等待，又收到第三次挥手的FIN消息，证明ACK没有成功到达，这个时间至少是：服务端的超时时间 + FIN的传输时间，为了保证可靠，采用更加保守的等待时间2MSL。\n如果客户端此时没有在等待状态直接CLOSED，服务端超时后发送FIN消息到客户端，客户端表示并不知道这数据包是干什么的，所以响应一个RST（用来异常的关闭连接，请自行了解）,如果客户端有一个和服务端的新连接在这个端口上建立。这将可能导致后面建立的连接受到影响，TCP是可靠的连接，所以是不希望这种不靠谱的事情出现的")])])])}),[],!1,null,null,null);v.default=P.exports}}]);